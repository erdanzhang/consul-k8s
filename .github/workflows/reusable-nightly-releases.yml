name: reusable-nightly-releases

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      additional-flags:
        required: false
        type: string
        default: ""
      directory:
        required: true
        type: string
      gotestsum-version:
        required: true
        type: string
      kind-version:
        required: false
        type: string
        default: "v1.24.6"
      checkout-ref:
        required: true
        type: string
    secrets:
      CONSUL_ENT_LICENSE:
        required: true
      DOCKER_USER:
        required: true
      DOCKER_PASS:
        required: true

# Environment variables can only be used at the step level
env:
  TEST_RESULTS: /tmp/test-results # path to where test results are saved
  CONSUL_ENT_LICENSE: ${{ secrets.CONSUL_ENT_LICENSE }}

jobs:
  get-go-version:
    name: "Determine Go toolchain version"
    runs-on: ubuntu-latest
    env:
      output-name: go-version
    outputs:
      go-version: ${{ steps.get-go-version.outputs.go-version }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.checkout-ref }}
      - name: Determine Go version
        id: get-go-version
        # We use .go-version as our source of truth for current Go
        # version, because "goenv" can react to it automatically.
        run: |
          echo "Building with Go $(cat .go-version)"
          echo "::set-output name=${{env.output-name}}::$(cat .go-version)"

  get-product-version:
    runs-on: ubuntu-latest
    outputs:
      product-version: ${{ steps.get-product-version.outputs.product-version }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.checkout-ref }}
      - name: get product version
        id: get-product-version
        run: |
          make version
          echo "::set-output name=product-version::$(make version)"

  build-distros:
    needs: [get-go-version, get-product-version]
    runs-on: ubuntu-latest
    env:
      version: ${{needs.get-product-version.outputs.product-version}}
    strategy:
      matrix:
        include:
          # cli
          - {go: "${{ needs.get-go-version.outputs.go-version }}", goos: "linux", goarch: "amd64", component: "cli", pkg_name: "consul-k8s", "bin_name": "consul-k8s" }
          # control-plane
          - {go: "${{ needs.get-go-version.outputs.go-version }}", goos: "linux", goarch: "amd64", component: "control-plane", pkg_name: "consul-k8s-control-plane", "bin_name": "consul-k8s-control-plane" }
          # consul-cni
          - {go: "${{ needs.get-go-version.outputs.go-version }}", goos: "linux", goarch: "amd64", component: "control-plane/cni", pkg_name: "consul-cni", "bin_name": "consul-cni" }

      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} ${{ matrix.component }} build
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.checkout-ref }}
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        working-directory: ${{ matrix.component }}
        run: |
          mkdir -p dist out

          export GIT_COMMIT=$(git rev-parse --short HEAD)
          export GIT_DIRTY=$(test -n "$(git status --porcelain)" && echo "+CHANGES")
          export GIT_IMPORT=github.com/hashicorp/consul-k8s/${{ matrix.component }}/version
          export GOLDFLAGS="-X ${GIT_IMPORT}.GitCommit=${GIT_COMMIT}${GIT_DIRTY} -X ${GIT_IMPORT}.GitDescribe=${{ env.version }}"


          CGO_ENABLED=0 go build -o dist/${{ matrix.bin_name }} -ldflags "${GOLDFLAGS}" .
          zip -r -j out/${{ matrix.pkg_name }}_${{ env.version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/

      - name: Upload built binaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.pkg_name }}_${{ env.version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          path: ${{ matrix.component}}/out/${{ matrix.pkg_name }}_${{ env.version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip

  # upload dev docker image
  dev-upload-docker:
    if: github.repository_owner == 'hashicorp' # Do not run on forks as this requires secrets
    needs: [ get-product-version, build-distros ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64"]
    env:
      repo: ${{ github.event.repository.name }}
      version: ${{ needs.get-product-version.outputs.product-version }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: consul-cni_${{ env.version }}_linux_${{ matrix.arch }}.zip
          path: control-plane/dist/cni/linux/${{ matrix.arch }}
      - uses: actions/download-artifact@v3
        with:
          name: consul-k8s-control-plane_${{ env.version }}_linux_${{ matrix.arch }}.zip
          path: control-plane/dist/linux/${{ matrix.arch }}
      - name: extract consul-cni zip
        env:
          ZIP_LOCATION: control-plane/dist/cni/linux/${{ matrix.arch }}
        run: |
          cd "${ZIP_LOCATION}"
          unzip -j *.zip
      - name: extract control-plane zip
        env:
          ZIP_LOCATION: control-plane/dist/linux/${{ matrix.arch }}
        run: |
          cd "${ZIP_LOCATION}"
          unzip -j *.zip
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Docker Build (Action)
        uses: docker/build-push-action@v3
        with:
          push: true
          context: control-plane
          platforms: ${{ matrix.arch }}
          target: release-default
          tags: docker.io/hashicorppreview/${{ env.repo }}-control-plane:${{ env.version }}-${{ inputs.name }}-${{ github.sha }}

  acceptance:
    needs: [ get-product-version, dev-upload-docker, get-go-version ]
    runs-on: [custom, linux, xl]
    strategy:
      matrix:
        include:
          - {runner: "0", test-packages: "basic"}
         # - {runner: "0", test-packages: "basic consul-dns"}
         # - {runner: "1", test-packages: "connect"}
         # - {runner: "2", test-packages: "controller example"}
         # - {runner: "3", test-packages: "ingress-gateway"}
         # - {runner: "4", test-packages: "metrics partitions"}
         # - {runner: "5", test-packages: "peering"}
         # - {runner: "6", test-packages: "snapshot-agent sync terminating-gateway vault wan-federation"}
      fail-fast: false
    env:
      CONSUL_K8S_IMAGE: docker.io/hashicorppreview/${{ github.event.repository.name }}-control-plane:${{ needs.get-product-version.outputs.product-version }}-${{ inputs.name }}-${{ github.sha }}
      go: ${{ needs.get-go-version.outputs.go-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.checkout-ref }}

      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go }}

      - name: Setup go mod cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install pre-requisites # Install gotestsum, kind, kubectl, and helm
        run: |
          wget https://github.com/gotestyourself/gotestsum/releases/download/v1.6.4/gotestsum_1.6.4_linux_amd64.tar.gz
          sudo tar -C /usr/local/bin -xzf gotestsum_1.6.4_linux_amd64.tar.gz
          rm gotestsum_1.6.4_linux_amd64.tar.gz

          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.15.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

          wget https://get.helm.sh/helm-v3.9.4-linux-amd64.tar.gz
          tar -zxvf helm-v3.9.4-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm

      - run: mkdir -p ${{ env.TEST_RESULTS }}

      - name: go mod download
        working-directory: ${{ inputs.directory }}
        run: go mod download

      - name: Create kind clusters
        run: |
          kind create cluster --name dc1 --image kindest/node:${{ inputs.kind-version }}
          kind create cluster --name dc2 --image kindest/node:${{ inputs.kind-version }}

      - name: Build CLI
        run: |
          sudo make cli-dev

      # We have to run the tests for each package separately so that we can
      # exit early if any test fails (-failfast only works within a single
      # package).
      - name: Run acceptance tests ${{ matrix.runner }}
        working-directory: ${{ inputs.directory }}
        if: github.repository_owner == 'hashicorp' # This prevents running on forks
        run: |
          exit_code=0
          echo "Running packages: ${{ matrix.test-packages }}"
          for pkg in $(echo ${{ matrix.test-packages }})
          do
            fullpkg="github.com/hashicorp/consul-k8s/${{ inputs.directory }}/${pkg}"
            echo "Testing package: ${fullpkg}"
            if ! gotestsum --jsonfile=jsonfile-${pkg////-} -- ${fullpkg} -p 1 -timeout 2h -failfast \
              ${{ inputs.additional-flags }} \
              -enable-enterprise \
              -enable-multi-cluster \
              -debug-directory=${{ env.TEST_RESULTS }}/debug \
              -consul-k8s-image=env.CONSUL_K8S_IMAGE
            then
              echo "Tests in ${pkg} failed, aborting early"
              exit_code=1
              break
            fi
          done
          gotestsum --raw-command --junitfile "${{ env.TEST_RESULTS }}/gotestsum-report.xml" -- cat jsonfile*
          exit $exit_code

      - name: Upload tests
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.name }}-${{ matrix.test-packages }}-gotestsum-report.xml
          path: ${{ env.TEST_RESULTS }}/gotestsum-report.xml

      - name: Upload debug (on failure)
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.name }}-${{ matrix.test-packages }}-debug-info
          path: ${{ env.TEST_RESULTS }}/debug